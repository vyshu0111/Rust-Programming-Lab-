Programming Exercises
1. Write a program to display output using print!?
fn main() {
    print!("Hello, world!");
    print!("hiiiiiiiii.....");
}

2. Write a program to display Output following pattern using Placeholders
1
22
333
4444
55555

fn main() {
    for i in 1..=5 {
        for _ in 0..i {
            print!("{}", i);
        }
        println!();
    }
}

3. Write a program to do the following
a. Declare a variable x and store value 1000 in it.
b. Declare a variable y and store value “Programming” in it
c. Print the values of x and y
d. Change the value of x to 1100
e. Print the values of x and y

fn main() {
    let mut x = 1000;
    let y = "Programming";
    println!("x = {}, y = {}", x, y);
    x = 1100;
    println!("x = {}, y = {}", x, y);
}

4. Write a program to implement the Scope and Shadowing

fn main() {
    let x = 5;

    {
        let x = 10;
        println!("Inner x: {}", x);
    }

    println!("Outer x: {}", x);

    let x = "Hello, Rust!";
    println!("Shadowed x: {}", x);
}

5. Write a program to implement the following
a. Implicit type declaration
b. Explicit type declaration

fn main() {
    let x = 10;
    let y: i32 = 20;

    println!("x = {}, y = {}", x, y);
}

6. Write Program to Declare an array, arr, of size 6 that has numbers divisible by 2 ranging
from 0 to 10 and Print the value of arr. 

fn main() {
    let arr = [0, 2, 4, 6, 8, 10];

    println!("{:?}", arr);
}

7. Write a program to create and access a tuple

fn main() {
    let tuple = (42, "Hello", 3.14);

    println!("First element: {}", tuple.0);
    println!("Second element: {}", tuple.1);
    println!("Third element: {}", tuple.2);
}

8. Write a program to create an array of 10 elements and implement the following
a. Create a of 2nd and 3rd element
b. Omit the start index of the slice
c. Omit the End Index of the Slice
d. Omit both Start and End Index of the Slice

fn main() {
    let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

    let slice_2_3 = &arr[1..3];
    println!("{:?}", slice_2_3);

    let slice_omit_start = &arr[..5];
    println!("{:?}", slice_omit_start);

    let slice_omit_end = &arr[5..];
    println!("{:?}", slice_omit_end);

    let slice_omit_both = &arr[..];
    println!("{:?}", slice_omit_both);
}

9. Write a program to create different types of constants print it in the output

fn main() {
    const INTEGER: i32 = 10;
    const FLOAT: f64 = 3.14;
    const BOOLEAN: bool = true;
    const CHARACTER: char = 'A';
    const STRING: &str = "Hello, Rust!";

    println!("Integer constant: {}", INTEGER);
    println!("Float constant: {}", FLOAT);
    println!("Boolean constant: {}", BOOLEAN);
    println!("Character constant: {}", CHARACTER);
    println!("String constant: {}", STRING);
}

10. Declaring String Object and converting String Literal to String Object

fn main() {
    let string_literal = "Hello, world!";
    let string_object = string_literal.to_string();

    println!("String literal: {}", string_literal);
    println!("String object: {}", string_object);
}
